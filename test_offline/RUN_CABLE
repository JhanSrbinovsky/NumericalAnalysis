#!/bin/ksh 

#############################################################################
###  as well as a bit of book-keeping this script will compile CABLE      ###
###  from source code  and deposit the executable binary in               ###
###  this directory. CABLE is then run over each of the sites specified   ### 
###  in "sites_main.nml" and output data moved into a created directory   ###
###  labelled by the name of the site, exact location depends somewhat on ###
### 
###  plots of flux data is called.                                        ### 
#############################################################################

#PBS -l walltime=1800
#PBS -l vmem=3072MB
#PBS -l ncpus=1
#PBS -l jobfs=2GB
#PBS -q normal  
#PBS -j oe
#PBS -N CABLE 

######################################################################
######################################################################
###  main script starts here. main script (run.ksh) called         ###
###  from command line and calls above funtions                    ###
######################################################################
######################################################################

#turning this on for debugging script can be useful
#set -x

execdir=`pwd`

#NOT pwd anymore
mypwd=$execdir
   

if [[ $1 == 'qsub' ]]; then
   print "\nThere is no requirement to keep this window alive. A script "
   print "submitting jobs to the queue is being run in the background. " 
   print "These qsub-ed jobs then run CABLE over the single-sites " 
   print "specified in the file, sites_main.nml. One job per site."
    
   print "\nAlternatively, after the following nohup notification you can just" 
   print "press enter to return to the command line."
   print "\nqstat -u `whoami` will show you the status of your qsub-ed jobs\n\n"
   
   nohup src/Qsub_support.ksh & 
   #/opt/pbs/bin/qsub -S /bin/ksh Qsub_support.ksh
   exit
fi        
#if we are on vayu (potentially cherx etc) or a qsub-ed job add module(s)
if [[ `uname -n | cut -c 1-4` == 'vayu'  ]] || [ -n "$PBS_JOBID" ] ; then
   module add R
   module add intel-fc/11.1.073 
fi

#if qsub-ed create flag file to work around user-process limit 
if [ -n "$PBS_JOBID" ]; then
   cd $PBS_O_WORKDIR
fi

#source file containing all the functions called from here
. $mypwd/src/functions.ksh

#so long as not qsub-ed AND script is submitted with no args 
if [ -z "$PBS_JOBID" ] && [[ $# == 0 ]]; then
   banner_welcome
fi

if [[ $1 == 'help' ]]; then
   help
fi

######################################################################
###  set up directory for this run - make output directory and     ###
### possibly helpful book-keeping to allow for immediate execution ### 
### and avoid accidently over-writing data - up to a point !!      ###
######################################################################

   if [[ $1 == 'run' ]] || [[ $2 == 'run' ]]; then
      book_keeping
      if [[ -d out ]]; then
         print "Adding to existing out directory" 
      else          
          mkdir out
      fi
            
   fi

######################################################################
###  manouvre, compile cable, manouvre some more                   ###
###  NB. qsub-ed jobs assume an executable already exists          ###
######################################################################
if [[ $1 == 'run' ]] || [ -n "$PBS_JOBID" ]; then 
   if [[ -f cable ]]; then
      print "Using existing executable"
      force_build='false'
   else
      print "Forcing build"     
      force_build='true'
   fi           
fi

if [[ $force_build == 'true' ]] || [[ $1 == 'build' ]] || [[ $1 == 'all' ]]; then
   print "\n*** BUILDING CABLE ***\n"
   build_cable "$mypwd" 
fi
########################################################################
##### call CABLE.R in batch mode to avoid going into R first, and    ###
##### then clean up this directory (these files have already been    ###
##### dealt with in R-script )                                       ###
########################################################################
if [[ $1 == 'run' ]] || [[ $2 == 'run' ]] || [[ $2 == 'plot' ]] || [[ -n "$PBS_JOBID" ]] || [[ $1 == 'all' ]]; then
   run_cable "$mypwd" 
fi

#########################################################################
###### call plot.R in batch mode to avoid going into R first          ###
###### pdfs will be left in out/*sitename* directory                  ###
###### NB. "plot"s data from out/. therefore if plotting only out/    ###
###### must exist                                                     ###
#########################################################################

if [[ $1 == 'plot' ]] || [[ $2 == 'plot' ]] || [[ -n "$PBS_JOBID" ]] || [[ $1 == 'all' ]]; then
   plot_cable "$execdir"
fi

if [[ $1 == 'clean' ]]; then
   clean
fi
